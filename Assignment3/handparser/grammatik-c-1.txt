******************************************************************************
*   Grammatik für die Sprache C-1 (Link weiter unten) ohne Linksrekursion.   *
*   Token innerhalb "" oder <> Klammern sind Terminalsymbole, alles andere   *
*   Nichtterminalsymbole. Das € Zeichen steht für Epsilon.                   *
*                                                                            *
*   https://amor.cms.hu-berlin.de/~kunert/lehre/material/c-1-grammar.php     *
******************************************************************************


program               ::= A <EOF>
A                     ::= functiondefinition A
                      |   €
functiondefinition    ::= type <ID> "(" ")" "{" statementlist "}"
functioncall 	        ::= <ID> "(" ")"
statementlist 	      ::= B
B                     ::= block B
                      |   €
block                 ::= "{" statementlist "}"
                      |   statement
statement 	          ::= ifstatement
                      | 	returnstatement ";"
                    	| 	printf ";"
                    	| 	statassignment ";"
                      |   functioncall ";"
ifstatement 	        ::= <KW_IF> "(" assignment ")" block
returnstatement 	    ::= <KW_RETURN> C
C                     ::= assignment
                      |   €
printf 	              ::= <KW_PRINTF> "(" assignment ")"
type 	                ::= <KW_BOOLEAN>
	                    | 	<KW_FLOAT>
	                    | 	<KW_INT>
	                    | 	<KW_VOID>
statassignment 	      ::= <ID> "=" assignment
assignment 	          ::= <ID> "=" assignment
                      |   expr
expr 	                ::= simpexpr D
D                     ::= E simpexpr
                      |   €
E                     ::= "=="
                      |   "!="
                      |   "<="
                      |   ">="
                      |   "<"
                      |   ">"
simpexpr 	            ::= F term H
F                     ::= "-"
                      |   €
G                     ::= "+"
                      |   "-"
                      |   "||"
H                     ::= G term H
                      |   €
term 	                ::= factor J
I                     ::= "*"
                      |   "/"
                      |   "&&"
J                     ::= I factor J
                      |   €
factor 	              ::= <CONST_INT>
                      | 	<CONST_FLOAT>
                    	| 	<CONST_BOOLEAN>
                    	| 	functioncall
                    	| 	<ID>
                    	| 	"(" assignment ")"

________________________________________________________________________________

Nichtterminalsymbol       First
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
program                   <KW_BOOLEAN>,<KW_FLOAT>,<KW_INT>,<KW_VOID>,<EOF>
A                         €,<KW_BOOLEAN>,<KW_FLOAT>,<KW_INT>,<KW_VOID>
functiondefinition        <KW_BOOLEAN>,<KW_FLOAT>,<KW_INT>,<KW_VOID>
functioncall              <ID>
statementlist             €,"{",<KW_IF>,<KW_RETURN>,<KW_PRINTF>,<ID>
B                         €,"{",<KW_IF>,<KW_RETURN>,<KW_PRINTF>,<ID>
block                     "{",<KW_IF>,<KW_RETURN>,<KW_PRINTF>,<ID>
statement                 <KW_IF>,<KW_RETURN>,<KW_PRINTF>,<ID>
K                         "=","("
ifstatement               <KW_IF>
returnstatement           <KW_RETURN>
C                         €,<ID>,"-",<CONST_INT>,<CONST_FLOAT>,<CONST_BOOLEAN>,<ID>,"("
printf                    <KW_PRINTF>
type                      <KW_BOOLEAN>,<KW_FLOAT>,<KW_INT>,<KW_VOID>
statassignment            <ID>
assignment                <ID>,"-",<CONST_INT>,<CONST_FLOAT>,<CONST_BOOLEAN>,<ID>,"("
expr                      "-",<CONST_INT>,<CONST_FLOAT>,<CONST_BOOLEAN>,<ID>,"("
D                         €,"==","!=","<=",">=","<",">"
E                         "==","!=","<=",">=","<",">"
simpexpr                  "-",<CONST_INT>,<CONST_FLOAT>,<CONST_BOOLEAN>,<ID>,"("
F                         €,"-"
G                         "||","-","+"
H                         €,"||","-","+"
term                      <CONST_INT>,<CONST_FLOAT>,<CONST_BOOLEAN>,<ID>,"("
I                         "*","/","&&"
J                         €,"*","/","&&"
factor                    <CONST_INT>,<CONST_FLOAT>,<CONST_BOOLEAN>,<ID>,"("



VORSICHT, die FOLLOW Menge ist nicht korrekt

Nichtterminalsymbol       Follow
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
program                   $,
A                         <EOF>
functiondefinition        <KW_BOOLEAN>,<KW_FLOAT>,<KW_INT>,<KW_VOID>
functioncall              ";","*","/","&&"
statementlist             "}"
B                         "}"
block                     "{",<KW_IF>,<KW_RETURN>,<KW_PRINTF>,<ID>,"}"
statement                 "{",<KW_IF>,<KW_RETURN>,<KW_PRINTF>,<ID>
K                         ";"
ifstatement               "}"
returnstatement           ";"
C                         ";"
printf                    ";"
type                      <ID>
statassignment            ";"
assignment                ")",";"
expr                      ")",";"
D                         ")",";"
E                         "-",<CONST_INT>,<CONST_FLOAT>,<CONST_BOOLEAN>,<ID>,"("
simpexpr                  "==","!=","<=",">=","<",">",")",";"
F                         <CONST_INT>,<CONST_FLOAT>,<CONST_BOOLEAN>,<ID>,"("
G                         <CONST_INT>,<CONST_FLOAT>,<CONST_BOOLEAN>,<ID>,"("
H                         "||","-","+","==","!=","<=",">=","<",">",")",";"
term                      "||","-","+","==","!=","<=",">=","<",">",")",";"
I                         <CONST_INT>,<CONST_FLOAT>,<CONST_BOOLEAN>,<ID>,"("
J                         "||","-","+","==","!=","<=",">=","<",">",")",";"
factor                    "*","/","&&"
