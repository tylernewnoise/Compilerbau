******************************************************************************
*   Grammatik für die Sprache C-1 (Link weiter unten) ohne Linksrekursion.   *
*   Token innerhalb "" oder <> Klammern sind Terminalsymbole, alles andere   *
*   Nichtterminalsymbole. Das € Zeichen steht für Epsilon.                   *
*                                                                            *
*   https://amor.cms.hu-berlin.de/~kunert/lehre/material/c1-grammar.php     *
******************************************************************************


program               ::= program_s <EOF>
program_s             ::= program_c program_s
                      |   €
program_c             ::= functiondefinition
                      |   declassignment ";"
functiondefinition    ::= type id "(" parameterlist_p ")" "{" statementlist "}"
parameterlist_p       ::= parameterlist
                      | €
parameterlist         ::= type id parameterlist_s
parameterlist_s       ::= "," type id parameterlist_s
                      |   €
functioncall 	        ::= id "(" functioncall_s ")"
functioncall_s        ::= functioncall_c
                      |   €
functioncall_c        ::= assignment assignment_s
assignment_s          ::= "," assignment assignment_s
                      |   €
statementlist 	      ::= statementlist_s
statementlist_s       ::= block statementlist_s
                      |   €
block                 ::= "{" statementlist "}"
                      |   statement
statement 	          ::= ifstatement
                      |   forstatement
                      |   whilestatement
                      | 	returnstatement ";"
                      |   dowhilestatement ";"
                    	| 	printf ";"
                      |   declassignment ";"
                    	| 	statassignment ";"
                      |   functioncall ";"
statblock             ::= "{" statementlist "}"
                      |   statement
ifstatement 	        ::= <KW_IF> "(" assignment ")" statblock statblock_p
statblock_p           ::= <KW_ELSE> statblock
                      |   €
forstatement          ::= <KW_FOR> "(" forstatement_o ";" expr ";" statassignment ")" statblock
forstatement_o        ::= statassignment
                      |   declassignment
dowhilestatement      ::= <KW_DO> statblock <KW_WHILE> "(" assignment ")"
whilestatement        ::= <KW_WHILE> "(" assignment ")" statblock
returnstatement 	    ::= <KW_RETURN> returnstatement_p
returnstatement_p     ::= assignment
                      |   €
printf 	              ::= <KW_PRINTF> "(" printf_o ")"
printf_o              ::= assignment
                      |   <CONST_STRING>
declassignment        ::= type id declassignment_p
declassignment_p      ::= "=" assignment
                      |   €
type 	                ::= <KW_BOOLEAN>
	                    | 	<KW_FLOAT>
	                    | 	<KW_INT>
	                    | 	<KW_VOID>
statassignment 	      ::= id "=" assignment
assignment 	          ::= id "=" assignment
                      |   expr
expr 	                ::= simpexpr simpexpr_p
simpexpr_p            ::= simpexpr_o
                      |   €
simpexpr_o            ::= "==" simpexpr
                      |   "!=" simpexpr
                      |   "<=" simpexpr
                      |   ">=" simpexpr
                      |   "<" simpexpr
                      |   ">" simpexpr
simpexpr 	            ::= term_o term_s
term_o                ::= "-" term
                      |   term
term_s                ::= term_o2 term_s
                      |   €
term_o2               ::= "+" term
                      |   "-" term
                      |   "||" term
term 	                ::= factor factor_s
factor_s              ::= factor_o factor_s
                      |   €
factor_o              ::= "*" factor
                      |   "/" factor
                      |   "&&" factor
factor 	              ::= <CONST_INT>
                      | 	<CONST_FLOAT>
                    	| 	<CONST_BOOLEAN>
                    	| 	functioncall
                    	| 	id
                    	| 	"(" assignment ")"
id                    ::= <ID>

________________________________________________________________________________

Nichtterminalsymbol       First
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
program                   <KW_BOOLEAN>,<KW_FLOAT>,<KW_INT>,<KW_VOID>,<EOF>
A                         €,<KW_BOOLEAN>,<KW_FLOAT>,<KW_INT>,<KW_VOID>
functiondefinition        <KW_BOOLEAN>,<KW_FLOAT>,<KW_INT>,<KW_VOID>
functioncall              <ID>
statementlist             €,"{",<KW_IF>,<KW_RETURN>,<KW_PRINTF>,<ID>
B                         €,"{",<KW_IF>,<KW_RETURN>,<KW_PRINTF>,<ID>
block                     "{",<KW_IF>,<KW_RETURN>,<KW_PRINTF>,<ID>
statement                 <KW_IF>,<KW_RETURN>,<KW_PRINTF>,<ID>
K                         "=","("
ifstatement               <KW_IF>
returnstatement           <KW_RETURN>
C                         €,<ID>,"-",<CONST_INT>,<CONST_FLOAT>,<CONST_BOOLEAN>,<ID>,"("
printf                    <KW_PRINTF>
type                      <KW_BOOLEAN>,<KW_FLOAT>,<KW_INT>,<KW_VOID>
statassignment            <ID>
assignment                <ID>,"-",<CONST_INT>,<CONST_FLOAT>,<CONST_BOOLEAN>,<ID>,"("
expr                      "-",<CONST_INT>,<CONST_FLOAT>,<CONST_BOOLEAN>,<ID>,"("
D                         €,"==","!=","<=",">=","<",">"
E                         "==","!=","<=",">=","<",">"
simpexpr                  "-",<CONST_INT>,<CONST_FLOAT>,<CONST_BOOLEAN>,<ID>,"("
F                         €,"-"
G                         "||","-","+"
H                         €,"||","-","+"
term                      <CONST_INT>,<CONST_FLOAT>,<CONST_BOOLEAN>,<ID>,"("
I                         "*","/","&&"
J                         €,"*","/","&&"
factor                    <CONST_INT>,<CONST_FLOAT>,<CONST_BOOLEAN>,<ID>,"("



VORSICHT, die FOLLOW Menge ist nicht korrekt

Nichtterminalsymbol       Follow
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
program                   $,
A                         <EOF>
functiondefinition        <KW_BOOLEAN>,<KW_FLOAT>,<KW_INT>,<KW_VOID>
functioncall              ";","*","/","&&"
statementlist             "}"
B                         "}"
block                     "{",<KW_IF>,<KW_RETURN>,<KW_PRINTF>,<ID>,"}"
statement                 "{",<KW_IF>,<KW_RETURN>,<KW_PRINTF>,<ID>
K                         ";"
ifstatement               "}"
returnstatement           ";"
C                         ";"
printf                    ";"
type                      <ID>
statassignment            ";"
assignment                ")",";"
expr                      ")",";"
D                         ")",";"
E                         "-",<CONST_INT>,<CONST_FLOAT>,<CONST_BOOLEAN>,<ID>,"("
simpexpr                  "==","!=","<=",">=","<",">",")",";"
F                         <CONST_INT>,<CONST_FLOAT>,<CONST_BOOLEAN>,<ID>,"("
G                         <CONST_INT>,<CONST_FLOAT>,<CONST_BOOLEAN>,<ID>,"("
H                         "||","-","+","==","!=","<=",">=","<",">",")",";"
term                      "||","-","+","==","!=","<=",">=","<",">",")",";"
I                         <CONST_INT>,<CONST_FLOAT>,<CONST_BOOLEAN>,<ID>,"("
J                         "||","-","+","==","!=","<=",">=","<",">",")",";"
factor                    "*","/","&&"
